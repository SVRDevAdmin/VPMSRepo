@model VPMS.Lib.Data.Models.Pets;
@inject IHttpContextAccessor httpContextaccessor
@using Microsoft.AspNetCore.Localization
@inject VPMSWeb.Interface.IResourcesLocalizer LangResources

@{
	ViewData["Title"] = "Patients Page";
	ViewBag.SelectedMenu = "patientsMenu";
	ViewBag.Breed = Model.Breed;
	List<string> otherPets = ViewData["OtherPets"] as List<string>;
	var currentDateTime = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss");

	var theme = httpContextaccessor.HttpContext.Request.Cookies["theme"];

	if (theme != null)
	{
		if (theme == "dark")
		{
			ViewBag.DarkTheme = "Dark";
		}
		if (theme == "light")
		{
			ViewBag.DarkTheme = "Light";
		}
	}
	else
	{
		ViewBag.DarkTheme = "Light";
	}
}

<link rel="stylesheet" href="~/css/gijgo.min.css" type="text/css" />
<link rel="stylesheet" href="~/lib/bootstrap-datetimepicker/css/bootstrap-datetimepicker.css" type="text/css" />

<script src="~/lib/moment.min.js"></script>
<script src="~/lib/datepicker/gijgo.min.js" type="text/javascript"></script>
<script src="~/lib/bootstrap-datetimepicker/js/bootstrap-datetimepicker.min.js"></script>
<script src="~/lib/chartjs/js/v2.9.4/Chart.js"></script>

<style>
	.field-container {
		display: flex;
		flex-direction: column;
		margin-left: 1.5vw;
		margin-right: 1.5vw;
	}

	.formlabel {
		font-weight: bold;
		margin-bottom: 0.3vw;
		font-size: 1vw;
	}

	.inputField {
		border: 0.1vw solid;
		font-size: 1vw;
	}

	.halfSize {
		width: 36vw;
	}

	.quaterSize {
		width: 16.5vw;
	}

	/* circle-icon */
	#container {
		width: 1.6vw;
		height: 1.6vw;
		display: flex;
		background: transparent;
		border-radius: 2vw;
		color: blue;
		border: 0.15vw solid;
		font-size: 1.5vw;
		justify-content: center;
		align-items: center;
	}

	.currentPage {
		background-color: blue !important;
		color: white !important;
		border: none;
		border-style: none !important;
	}

	.currentPageText {
		color: black !important;
	}

	.medicalRecordPartition {
		width: 26vw;
		height: 27vw;
		overflow: auto;
	}

	.medicalRecordPartitionTitle {
		margin-left: 1.5vw;
		margin-right: 1.5vw;
		margin-bottom: 1.5vw;
	}

	/* for tooltips */
	/* Tooltip container */
	.tooltip {
		position: relative;
		display: inline-block;
		opacity: 1;
		z-index: 1;
	}

		/* Tooltip text */
		.tooltip .tooltiptext {
			visibility: hidden;
			/* width: 120px; */
			background-color: black;
			color: #fff;
			text-align: center;
			padding: 5px 0;
			border-radius: 6px;
			font-size: 0.7vw;
			/* Position the tooltip text - see examples below! */
			position: absolute;
			z-index: 1;
			width: 12vw;
			bottom: 100%;
			left: 50%;
			margin-left: -1.8vw;
			/* Fade in tooltip - takes 1 second to go from 0% to 100% opac: */
			opacity: 0;
			transition: opacity 1s;
		}

		/* Show the tooltip text when you mouse over the tooltip container */
		.tooltip:hover .tooltiptext {
			opacity: 1;
			visibility: visible;
		}

		/* Hover dropdown */
	.dropbtn {
		background-color: transparent;
		/* color: white; */
		/* padding: 16px; */
		font-size: 1.3vw;
		border: none;
	}

	.dropdown {
		position: relative;
		display: inline-block;
	}

	.dropdown-content {
		display: none;
		position: absolute;
		background-color: #f1f1f1;
		min-width: 9vw;
		box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
		z-index: 1;
		right: 0;
		text-align: center;
	}

		.dropdown-content a {
			color: black;
			padding: 0 1vw;
			text-decoration: none;
			display: block;
		}

			/* .dropdown-content a:hover {
				background-color: #ddd;
			} */

	.dropdown:hover .dropdown-content {
		display: block;
	}

	td, th {
		padding: 0 1vw;
	}

	.dropdown:hover .dropdown-arrow {
		transform: rotate(180deg);
	}	

	.dropdown-arrow {		
		transition: 0.6s ease;
	}
</style>

<template id="VaccinationTemplate">
	<div class="VaccinationGroup" style="margin-bottom: 1vw;">
		<input class="IDVaccination" type="text" hidden/>
		<input class="CreatedDateVaccination" type="text" value="@currentDateTime" hidden />
		<input class="CreatedByVaccination" type="text" hidden/>
		<div class="medicalRecord">
			<span class="TypeVaccinationText"></span> </br>
			<span class="NameVaccinationText" style="font-weight:bold;"></span> </br>
			<span class="CreatedOnVaccinationText" style="color: darkgray;"></span> </br>
			<span class="DueDateVaccinationText" style="color: red;"></span> </br>
			<div>
				<div class="tooltip">
					<i class="fa fa-commenting-o textcolor" aria-hidden="true"></i>
					<span class="tooltiptext DescriptionVaccinationText"></span>
				</div>
				<div class="tooltip">
					<i class="fa fa-exclamation-circle textcolor" aria-hidden="true"></i>
					<span class="tooltiptext RemarksVaccinationText"></span>
				</div>
			</div>
		</div>
		<div class="medicalRecord hideContainer">
			<div>
				<div class="field-container" style="margin: 0;">
					<span class="formlabel">@LangResources["Patient_Label_Type"] <span style="color: red;">*</span></span>
					<select class="form-select form-field inputField TypeVaccination isValidate" onchange="serviceList(this.value,this.parentElement.parentElement.querySelector('.NameVaccination'), 'Vaccination', false, '', '');">
						<option value="" selected> -- @LangResources["Patient_Selection_SelectVaccinationType"] --</option>
						@foreach (var vaccination in ViewData["VaccinationList"] as List<VPMS.Lib.Data.Models.ServiceCategory>)
						{
							<option value="@vaccination.ID"> @vaccination.SubCategoryName</option>
						}
					</select>
				</div>

				<div class="field-container" style="margin: 0;">
					<span class="formlabel">@LangResources["Patient_Label_Name"] <span style="color: red;">*</span></span>
					<select class="form-select form-field inputField NameVaccination isValidate">
						<option value="" selected> -- @LangResources["Patient_Selection_SelectVaccination"] --</option>
					</select>
				</div>

				<div class="field-container" style="margin: 0;">
					<span class="formlabel">@LangResources["Patient_Label_DueDate"] <span style="color: red;">*</span></span>
					<input type="date" class="form-control form-field inputField DueDateVaccination isValidate" />
				</div>

				<div class="field-container" style="margin: 0;">
					<span class="formlabel">@LangResources["TreatmentPlan_Label_Remarks"]</span>
					<input type="text" class="form-control form-field inputField RemarksVaccination" />
				</div>

				<div style="display:flex;align-items: center; justify-content: flex-end; margin-top: 1.5vw;">
					<a onclick="serviceToDelete.push(this.parentElement.parentElement.parentElement.parentElement.querySelector('.IDVaccination').value); removeClone(this.parentElement.parentElement.parentElement.parentElement);"><i class="fa fa-trash-o" style="font-size:2vw;color:red"></i></a>
				</div>
			</div>
		</div>
	</div>
</template>

<template id="MedicationTemplate">
	<div class="MedicationGroup" style="margin-bottom: 1vw;">
		<input class="IDMedication" type="text" hidden/>
		<input class="CreatedDateMedication" value="@currentDateTime" type="text" hidden />
		<input class="CreatedByMedication" type="text" hidden/>
		<div class="medicalRecord">
			<span class="TypeMedicationText"></span> </br>
			<span class="NameMedicationText" style="font-weight:bold;"></span> </br>
			<span class="StatusMedicationText" style="color: #5e8cd1"></span> </br>
			<span class="DueDateMedicationText" style="color: red;"></span> </br>
			<div>
				<div>
					<div class="tooltip">
						<i class="fa fa-commenting-o textcolor" aria-hidden="true"></i>
						<span class="tooltiptext DescriptionMedicationText"></span>
					</div>
					<i class="fa-regular fa-trash-can textcolor"></i>
				</div>
			</div>
		</div>
		<div class="medicalRecord hideContainer">
			<div>
				<div class="field-container" style="margin: 0;">
					<span class="formlabel">@LangResources["Patient_Label_Type"] <span style="color: red;">*</span></span>
					<select class="form-select form-field inputField TypeMedication isValidate" onchange="medicationList(this.value,this.parentElement.parentElement.querySelector('.NameMedication'), 'Medication', false, '', '');">
						<option value="" selected> -- @LangResources["Patient_Selection_SelectMedicationType"] --</option>
						@foreach (var medication in ViewData["MedicationList"] as List<VPMS.Lib.Data.Models.InventoryCategory>)
						{
							<option value="@medication.ID"> @medication.TypeName</option>
						}
					</select>
				</div>

				<div class="field-container" style="margin: 0;">
					<span class="formlabel">@LangResources["Patient_Label_Name"] <span style="color: red;">*</span></span>
					<select class="form-select form-field inputField NameMedication isValidate">
						<option value="" selected> -- @LangResources["Patient_Selection_SelectMedication"] --</option>
					</select>
				</div>

				<div class="field-container" style="margin: 0;">
					<span class="formlabel">@LangResources["Patient_Label_ExpiryDate"] <span style="color: red;">*</span></span>
					<input type="date" class="form-control form-field inputField DueDateMedication isValidate" />
				</div>

				<div style="display:flex;align-items: center; justify-content: flex-end; margin-top: 1.5vw;">
					<a onclick="medicationToDelete.push(this.parentElement.parentElement.parentElement.parentElement.querySelector('.IDMedication').value); removeClone(this.parentElement.parentElement.parentElement.parentElement);"><i class="fa fa-trash-o" style="font-size:2vw;color:red"></i></a>
				</div>
			</div>
		</div>						
	</div>
</template>

<template id="SurgeriesTemplate">
	<div class="SurgeryGroup" style="margin-bottom: 1vw;">
		<input class="IDSurgeries" type="text" hidden/>
		<input class="CreatedDateSurgeries" value="@currentDateTime" type="text" hidden />
		<input class="CreatedBySurgeries" type="text" hidden/>
		<div class="medicalRecord">
			<span class="TypeSurgeriesText"></span> </br>
			<span class="NameSurgeriesText" style="font-weight:bold;"></span> </br>
			<span class="CreatedOnSurgeriesText" style="color: darkgray;"></span> </br>
			<span class="DueDateSurgeriesText" style="color: red;"></span> </br>
			<div>
				<div class="tooltip">
					<i class="fa fa-commenting-o textcolor" aria-hidden="true"></i>
					<span class="tooltiptext DescriptionSurgeriesText"></span>
				</div>
				<div class="tooltip">
					<i class="fa fa-exclamation-circle textcolor" aria-hidden="true"></i>
					<span class="tooltiptext RemarksSurgeriesText"></span>
				</div>	
			</div>
		</div>
		<div class="medicalRecord hideContainer">
			<div>
				<div class="field-container" style="margin: 0;">
					<span class="formlabel">@LangResources["Patient_Label_Type"] <span style="color: red;">*</span></span>
					<select class="form-select form-field inputField TypeSurgeries isValidate" onchange="serviceList(this.value, this.parentElement.parentElement.querySelector('.NameSurgeries'), 'Surgery', false, '', '');">
						<option value="" selected> -- @LangResources["Patient_Selection_SelectSurgeryType"] --</option>
						@foreach (var vaccination in ViewData["SurgeryList"] as List<VPMS.Lib.Data.Models.ServiceCategory>)
						{
							<option value="@vaccination.ID"> @vaccination.SubCategoryName</option>
						}
					</select>
				</div>

				<div class="field-container" style="margin: 0;">
					<span class="formlabel">@LangResources["Patient_Label_Name"] <span style="color: red;">*</span></span>
					<select class="form-select form-field inputField NameSurgeries isValidate">
						<option value="" selected> -- @LangResources["Patient_Selection_SelectSurgery"] --</option>
					</select>
				</div>

				<div class="field-container" style="margin: 0;">
					<span class="formlabel">@LangResources["Patient_Label_DueDate"] <span style="color: red;">*</span></span>
					<input type="date" class="form-control form-field inputField DueDateSurgeries isValidate" />
				</div>

				<div class="field-container" style="margin: 0;">
					<span class="formlabel">@LangResources["TreatmentPlan_Label_Remarks"]</span>
					<input type="text" class="form-control form-field inputField RemarksSurgeries" />
				</div>

				<div style="display:flex;align-items: center; justify-content: flex-end; margin-top: 1.5vw;">
					<a onclick="serviceToDelete.push(this.parentElement.parentElement.parentElement.parentElement.querySelector('.IDSurgeries').value); removeClone(this.parentElement.parentElement.parentElement.parentElement);"><i class="fa fa-trash-o" style="font-size:2vw;color:red"></i></a>
				</div>
			</div>
		</div>
	</div>
</template>

<div style="display: flex;">

	<div style="display: flex; align-items: center; margin-bottom: 1.5vw;">
		<img id="imgBackArrow" style=" margin-right: 1vw; width: 1.5vw;" onclick="location.href='/Patients/PatientProfile/view/@ViewBag.PatientID'" />
		<span class="textColor" style="font-size: 2vw;">@LangResources["Patient_Title_Patients"]</span>
		<span class="textColor" style="font-size: 2vw; margin-left:1vw; margin-right:1vw; font-weight: bold;"> &#62; </span>
		<span class="textColor" style="font-size: 2vw;">@LangResources["Patient_Title_PatientProfile"]</span>
		<span class="textColor" style="font-size: 2vw; margin-left:1vw; margin-right:1vw; font-weight: bold;"> &#62; </span>
		<span style="font-size: 2vw; color: dodgerblue;">@ViewData["PetName"] @LangResources["Patient_Title_Profile"]</span>
	</div>
</div>

<div style="display: flex; justify-content: center;">
	<div id="LeftInfoContainer" style="overflow: auto; height: 75.2vh; margin-right: 1vw; width: 51vw;">
		
		@{
			var updatedOn = "";
			if(Model.UpdatedDate == null)
			{
				updatedOn = Model.CreatedDate.ToString("dd/MM/yyyy HH:mm:ss");
			}
			else
			{
				updatedOn = Model.UpdatedDate?.ToString("dd/MM/yyyy HH:mm:ss");
			}
		}

		<div class="containerBackground2" style="width: 50vw; color: white; padding: 0.7vw; padding-left: 1.5vw; border-top-left-radius: 0.5vw; border-top-right-radius: 0.5vw;  display: flex; justify-content: space-between; align-items: center;">
			<span class="formlabel" style="margin-bottom: 0 !important;">@LangResources["Patient_Title_PetInfo"] (@LangResources["Patient_Label_UpdatedOn"] : @updatedOn)</span>
			<button onclick="editPetInfo(false);" class="btn btn-lg btn-primary petInfoProfile" style="height: 2vw; width: 3vw; padding: 0; display: flex; justify-content: center; align-items: center;">
				<i class="fa-regular fa-pen-to-square"></i>
			</button>
		</div>
		<div class="containerBorder" style="color: darkgray; width: 50vw; border-style: solid; border-bottom-left-radius: 0.5vw; border-bottom-right-radius: 0.5vw; padding: 1.5vw; padding-left: 0.5vw; padding-right: 0.5vw; padding-bottom: 0.5vw; margin-bottom: 2vw;">
			 
			<input id="PetID" type="text" value="@Model.ID" hidden />
			<input id="PetCreatedDate" type="text" value="@Model.CreatedDate.ToString("yyyy-MM-ddTHH:mm:ss")" hidden />
			<input id="PetCreatedBy" type="text" value="@Model.CreatedBy" hidden />

			<div style="display: flex; margin-bottom: 1.5vw;">
				<div class="field-container quaterSize">
					<span class="formlabel">@LangResources["Patient_Label_PetName"]</span>
					<input type="text" class="form-control form-field inputField petInfoProfile PetName hideContainer" value="@Model.Name" />
					<span class="formlabel petInfoProfile textColor PetName">@Model.Name</span>
				</div>

				<div class="field-container quaterSize">
					<span class="formlabel">@LangResources["Patient_Label_RegistrationNo"]</span>
					<input type="text" class="form-control form-field inputField petInfoProfile RegistrationNo hideContainer" value="@Model.RegistrationNo" />
					<span class="formlabel petInfoProfile textColor RegistrationNo">@Model.RegistrationNo</span>
				</div>

				<div class="field-container">
					<span class="formlabel">@LangResources["Patient_Label_Sex"]</span>
					<select class="form-select form-field inputField petInfoProfile Sex hideContainer">
						<option value=""> -- @LangResources["Patient_Selection_SelectSex"] --</option>
						@if (Model.Gender == "M")
						{
							<option value="M" selected> @LangResources["Patient_Selection_Male"]</option>
							<option value="F"> @LangResources["Patient_Selection_Female"]</option>
							Model.Gender = @LangResources["Patient_Selection_Male"];
						}
						else
						{
							<option value="M"> @LangResources["Patient_Selection_Male"]</option>
							<option value="F" selected> @LangResources["Patient_Selection_Female"]</option>
							Model.Gender = @LangResources["Patient_Selection_Female"];
						}
					</select>
					<span class="formlabel petInfoProfile textColor Sex">@Model.Gender</span>
				</div>
			</div>

			<div style="display: flex; margin-bottom: 1.5vw;">
				<div class="field-container quaterSize">
					<span class="formlabel">@LangResources["Patient_Label_DOB"]</span>
					<input type="date" class="form-control form-field inputField petInfoProfile DOB hideContainer" value="@Model.DOB.ToString("yyyy-MM-dd")" onchange="updateAge(this);"/>
					<span class="formlabel petInfoProfile textColor DOB">@Model.DOB</span>
				</div>

				<div class="field-container quaterSize">
					<span class="formlabel">@LangResources["Patient_Label_Age"]</span>

					@{
						var currentDate = DateOnly.FromDateTime(DateTime.Now);
						var petDOB = Model.DOB;
						var dayDiffer = currentDate.DayNumber - petDOB.DayNumber;
						var yearDiffer = currentDate.Year - petDOB.Year;
						var monthDiffer = currentDate.Month - petDOB.Month + (12 * yearDiffer);
						var ageText = "";
						var yearText = "";

						if (dayDiffer < 30)
						{
							ageText = dayDiffer + " day";
							if (dayDiffer > 1) { ageText += "s"; }
							yearText = "0";
						}
						else if (monthDiffer < 12)
						{
							ageText = monthDiffer + " month";
							if (monthDiffer > 1) { ageText += "s"; }
							yearText = "0";
						}
						else
						{
							ageText = (monthDiffer / 12) + " year";
							if ((monthDiffer / 12) > 1) { ageText += "s"; }
							yearText = (monthDiffer / 12) + "";
						}
					}

					<input type="text" class="form-control form-field inputField petInfoProfile Age hideContainer" value="@yearText" disabled />
					<span class="formlabel petInfoProfile textColor Age"> @ageText </span>
				</div>

				<div class="field-container">
					<span class="formlabel">@LangResources["Patient_Label_Species"]</span>
					<select onchange="changeSpecies(this);" class="form-select form-field inputField petInfoProfile Species hideContainer">
						<option value=""> -- @LangResources["Patient_Selection_SelectSpecies"] --</option>
						@foreach (var species in ViewData["Species"] as List<string>)
						{
							if(species == Model.Species)
							{
								<option value="@species" selected> @species</option>
							}
							else
							{
								<option value="@species"> @species</option>
							}
						}
					</select>
					<span class="formlabel petInfoProfile textColor Species">@Model.Species</span>
				</div>
			</div>

			<div style="display: flex; margin-bottom: 1.5vw;">
				<div class="field-container quaterSize">
					<span class="formlabel">@LangResources["Patient_Label_Breed"]</span>
					<select class="form-select form-field inputField petInfoProfile Breed hideContainer">
						<option value="" selected> -- @LangResources["Patient_Selection_SelectBreed"] --</option>
					</select>
					<span class="formlabel petInfoProfile textColor Breed">@Model.Breed</span>
				</div>

				<div class="field-container quaterSize">
					<span class="formlabel">@LangResources["Patient_Label_Allergies"]</span>
					<input type="text" class="form-control form-field inputField petInfoProfile Allergies hideContainer" value="@Model.Allergies" />
					<span class="formlabel petInfoProfile textColor Allergies">@Model.Allergies</span>
				</div>

				<div class="field-container">
					<span class="formlabel">@LangResources["Patient_Label_Color"]</span>
					<select class="form-select form-field inputField petInfoProfile Color hideContainer">
						<option value=""> -- @LangResources["Patient_Selection_SelectColor"] --</option>
						@foreach (var color in ViewData["Color"] as List<string>)
						{
							if (color == Model.Color)
							{
								<option value="@color" selected> @color</option>
							}
							else
							{
								<option value="@color"> @color</option>
							}
						}
					</select>
					<span class="formlabel petInfoProfile textColor Color">@Model.Color</span>
				</div>
			</div>

			<div style="display: flex; margin-bottom: 1.5vw;">
				<div class="field-container quaterSize">
					<span class="formlabel">@LangResources["Patient_Label_Height"] (cm)</span>
					<input type="text" class="form-control form-field inputField petInfoProfile Height hideContainer" value="@Model.Height" />
					<span class="formlabel petInfoProfile textColor Height">@Model.Height</span>
				</div>

				<div class="field-container quaterSize">
					<span class="formlabel">@LangResources["Patient_Label_Weight"] (kg)</span>
					<input type="text" class="form-control form-field inputField petInfoProfile Weight hideContainer" value="@Model.Weight" />
					<span class="formlabel petInfoProfile textColor Weight">@Model.Weight</span>
				</div>

				<div class="field-container">
					<span class="formlabel">@LangResources["Patient_Label_Status"]</span>
					<select class="form-select form-field inputField petInfoProfile Status hideContainer">
						<option value=""> -- @LangResources["Patient_Selection_SelectStatus"] --</option>
						@if (Model.Status == 1)
						{
							<option value="1" selected> @LangResources["Patient_Selection_Active"]</option>
							<option value="2"> @LangResources["Patient_Selection_Inactive"]</option>
						}
						else
						{
							<option value="1"> @LangResources["Patient_Selection_Active"]</option>
							<option value="2" selected> @LangResources["Patient_Selection_Inactive"]</option>
						}
					</select>
					@if (Model.Status == 1)
					{
						<span class="formlabel petInfoProfile textColor Status">@LangResources["Patient_Selection_Active"]</span>
					}
					else
					{
						<span class="formlabel petInfoProfile textColor Status">@LangResources["Patient_Selection_Inactive"]</span>
					}
				</div>
			</div>

			<div style="display: flex; margin-bottom: 1.5vw;" class="petInfoProfile">
				<div class="field-container quaterSize">
					<span class="formlabel">@LangResources["Patient_Label_Obese"]</span>
					@{
						var obesity = "";
						decimal bmi = 0;

						if (Model.Height != 0)
						{
							bmi = (Model.Weight / (Model.Height * Model.Height)) * 10000;
						}
					}
					<span class="formlabel Obese" style="color: @(bmi > 30 ? "red" : "green");">@(bmi > 30 ? LangResources["Patient_Selection_Yes"] : @LangResources["Patient_Selection_No"])</span>
				</div>
			</div>


			<div class="hideContainer petInfoProfile" style="text-align: end; margin-right: 1.6vw;">
				<button onclick="editPetInfo(false)" class="btn btn-lg btn-secondary" style="width: 11vw; font-size: 1vw;"> @LangResources["Patient_Button_Cancel"] </button>
				<button onclick="editPetInfo(true);" class="btn btn-lg btn-primary" style="width: 11vw; font-size: 1vw;"> @LangResources["Patient_Button_Save"] </button>
			</div>

		</div>

		<div class="containerBackground2" style="width: 50vw; color: white; padding: 0.7vw; padding-left: 1.5vw; border-top-left-radius: 0.5vw; border-top-right-radius: 0.5vw;  display: flex; justify-content: space-between; align-items: center;">
			<span class="formlabel" style="margin-bottom: 0 !important;">@LangResources["Patient_Title_MedicalRecord"]</span>
			<button onclick="editMedicalRecord();" class="btn btn-lg btn-primary medicalRecord" style="height: 2vw; width: 3vw; padding: 0; display: flex; justify-content: center; align-items: center;">
				<i class="fa-regular fa-pen-to-square"></i>
			</button>
			<button onclick="submitMedicalRecord(this.parentElement.parentElement.querySelector('#medicalRecordContainer'));" class="btn btn-lg btn-primary medicalRecord hideContainer" style="height: 2vw; width: 3vw; padding: 0; display: flex; justify-content: center; align-items: center;">
				<i class="fa-regular fa-floppy-disk"></i>
			</button>
		</div>
		<div id="medicalRecordContainer" class="containerBorder textColor" style="width: 50vw; border-style: solid; border-bottom-left-radius: 0.5vw; border-bottom-right-radius: 0.5vw; padding: 1.5vw; padding-left: 0.5vw; padding-right: 0.5vw; padding-bottom: 0.5vw; margin-bottom: 2vw; display: flex">

			<div class="medicalRecordPartition">

				<div class="medicalRecordPartitionTitle" style="display: flex; justify-content: space-between;">
					<span class="formlabel" style="color: blue;">@LangResources["Patient_Label_Vaccination"]</span>
					<a class="medicalRecord hideContainer" href="#" onclick="cloneServices('VaccinationTemplate', 'VaccinationContent', 'Vaccination', 0, '', '', '', '', '', '', '');" style="font-size: 1vw; color: blue !important;"><i class="fa-solid fa-plus"></i></a>
				</div>

				<div id="VaccinationContent" style="font-size: 1vw; padding-left: 1.5vw; padding-right: 1.5vw; padding-bottom: 1.5vw;">
				</div>

			</div>

			<div class="medicalRecordPartition">
				<div class="medicalRecordPartitionTitle" style="display: flex; justify-content: space-between;">
					<span class="formlabel" style="color: blue;">@LangResources["Patient_Label_Medication"]</span>
					<a class="medicalRecord hideContainer" href="#" onclick="cloneMedication('MedicationTemplate', 'MedicationContent', 'Medication', 0, '', '', '', '', '', '', '');" style="font-size: 1vw; color: blue !important;"><i class="fa-solid fa-plus"></i></a>
				</div>

				<div id="MedicationContent" style="font-size: 1vw; padding-left: 1.5vw; padding-right: 1.5vw; padding-bottom: 1.5vw;">
				</div>

			</div>

			<div class="medicalRecordPartition">
				<div class="medicalRecordPartitionTitle" style="display: flex; justify-content: space-between;">
					<span class="formlabel" style="color: blue;">@LangResources["Patient_Label_Surgeries"]</span>
                    <a class="medicalRecord hideContainer" href="#" onclick="cloneServices('SurgeriesTemplate', 'SurgeriesContent', 'Surgeries', 0, '', '', '', '', '', '', '');" style="font-size: 1vw; color: blue !important;"><i class="fa-solid fa-plus"></i></a>
				</div>

				<div id="SurgeriesContent" style="font-size: 1vw; padding-left: 1.5vw; padding-right: 1.5vw; padding-bottom: 1.5vw;">
				</div>

			</div>

		</div>

		<div class="containerBorder textColor" style="width: 50vw; padding: 0.7vw; padding-left: 1.5vw; border-radius: 0.5vw; border-style: solid; margin-bottom: 2vw;">

			<div style="margin-bottom: 2vw;">
				<span style="font-weight: bold;">@LangResources["Patient_Title_PetGrowthHistory"]</span>
			</div>

			<div style="height: 24vw; overflow: auto;">
				<table id="petGrowthTable" class="textColor" style="width: 46vw; margin-bottom: 2vw; font-size: 1vw;">
					<tr class="containerBackground">
						<th class="table-content"> @LangResources["Patient_Label_Date"] </th>
						<th class="table-content"> @LangResources["Patient_Label_AgeYear"] </th>
						<th class="table-content"> @LangResources["Patient_Label_Height"] </th>
						<th class="table-content"> @LangResources["Patient_Label_Weight"] </th>
						<th class="table-content"> @LangResources["Patient_Label_Allergies"] </th>
						<th class="table-content"> @LangResources["Patient_Label_Obesity"] </th>
					</tr>
				</table>
			</div>

		</div>

		<div class="containerBorder textColor" style="width: 50vw; padding: 0.7vw; padding-left: 1.5vw; border-radius: 0.5vw; border-style: solid;">

			<div style="display: flex; justify-content: space-between; margin-bottom: 2vw;">
				<span style="font-weight: bold;"> @LangResources["Patient_Title_PetGrowthTrend"]</span>
				<div class="dropdown">
					<button class="dropbtn textColor"> <span id="chartSelection"></span> <i class="fa-solid fa-chevron-down dropdown-arrow"></i></button>
					<div class="dropdown-content containerBackground4" style="border: 0.1vw solid; border-radius: 1vw;">
						<a href="#" class="textColor" style="border-top-left-radius: 1vw; border-top-right-radius: 1vw;" onclick="changeChart('BMI', this.innerHTML)">@LangResources["Patient_Label_BMI"]</a>
						<a href="#" class="textColor" onclick="changeChart('Weight', this.innerHTML);">@LangResources["Patient_Label_Weight"]</a>
						<a href="#" class="textColor" style="border-bottom-left-radius: 1vw; border-bottom-right-radius: 1vw;" onclick="changeChart('Height', this.innerHTML);">@LangResources["Patient_Label_Height"]</a>
					</div>
				</div>
			</div>

			<canvas id="myChart"></canvas>

		</div>


	</div>

	<div id="RightInfoContainer" style="margin-left: 1.5vw; overflow: auto; height: 75.2vh; width: 24vw;">
		<div>

			<div class="containerBackground2" style="width: 23vw; padding: 0.7vw; padding-left: 1.5vw; border-top-left-radius: 0.5vw; border-top-right-radius: 0.5vw;">
				<span class="formlabel" style="margin-bottom: 0 !important;">@LangResources["Patient_Title_AllPets"]</span>
			</div>
			<div class="containerBorder textColor" style="color: darkgray; width: 23vw; border-style: solid; border-bottom-left-radius: 0.5vw; border-bottom-right-radius: 0.5vw; padding: 2vw; padding-left: 0.5vw; padding-right: 0.5vw; padding-bottom: 0.5vw; margin-bottom: 2vw;">

				<div id="allPets" style="display: flex; margin-bottom: 1.5vw;">
					@{
						if (otherPets.Count > 0)
						{
							foreach (string otherPet in otherPets)
							{
									<div class="field-container" style="text-align: center;">
									<img onclick="location.href = '/Patients/PetProfile/View/@ViewBag.PatientID/@otherPet'" src="~/images/Cat profile image.png" style="width: 4vw; border-radius: 50px;" />
										<a href="/Patients/PetProfile/View/@ViewBag.PatientID/@otherPet" style="font-size: 1vw;"> @otherPet </a>
									</div>
							}
						}
						else
						{
								<div class="field-container" style="text-align: center; width: 100%;">
									<span class="textColor">@LangResources["Patient_Label_NoOtherPet"]</span>
								</div>
						}
					}
					
				</div>

			</div>

			<div class="containerBackground2" style="width: 23vw; padding: 0.7vw; padding-left: 1.5vw; border-top-left-radius: 0.5vw; border-top-right-radius: 0.5vw;">
				<span class="formlabel" style="margin-bottom: 0 !important;">@LangResources["Patient_Title_AdditionalInformation"]</span>
			</div>
			<div class="containerBorder textColor" style="color: darkgray; width: 23vw; border-style: solid; border-bottom-left-radius: 0.5vw; border-bottom-right-radius: 0.5vw; padding: 2vw; padding-left: 0.5vw; padding-right: 0.5vw; padding-bottom: 0.5vw; margin-bottom: 2vw;">

				<div style="display: flex; margin-bottom: 1.5vw;">
					<div class="field-container quaterSize" style="display: flex; align-items: center;">
						<button class="btn btn-lg btn-primary" data-bs-toggle="modal" data-bs-target="#healthCardModal" style="width: 5vw; height: 4vw; font-size: 2vw; display: flex; justify-content: center;  align-items: center;">
							<i class="fa-solid fa-notes-medical"></i>
						</button>
						<span class="formlabel textColor" style="text-wrap: nowrap;">@LangResources["Patient_Label_HealthCard"]</span>
					</div>
					<div class="field-container quaterSize" style="display: flex; align-items: center;">
						<button class="btn btn-lg btn-primary" onclick="window.location = '/Patients/TreatmentPlan/@ViewBag.PatientID/@ViewData["PetName"]';" style="width: 5vw; height: 4vw; font-size: 2vw; display: flex; justify-content: center;  align-items: center;">
							<i class="fa-regular fa-hospital"></i>
						</button>
						<span class="formlabel textColor" style="text-wrap: nowrap;">@LangResources["Patient_Label_TreatmentPlan"]</span>
					</div>
				</div>

				<div style="display: flex; margin-bottom: 1.5vw;">
					<div class="field-container quaterSize" style="display: flex; align-items: center;">
						<button class="btn btn-lg btn-primary" onclick="window.location = '/Patients/InvoiceBilling/@ViewBag.PatientID/@ViewData["PetName"]';" style="width: 5vw; height: 4vw; font-size: 2vw; display: flex; justify-content: center;  align-items: center;">
							<i class="fa-solid fa-receipt"></i>
						</button>
						<span class="formlabel textColor" style="text-wrap: nowrap;">@LangResources["Patient_Label_InvoiceBilling"]</span>
					</div>
					<div class="field-container quaterSize" style="display: flex; align-items: center;">
						<button class="btn btn-lg btn-primary" onclick="window.location = '/Patients/TestManagement/@ViewBag.PatientID/@ViewData["PetName"]';" style="width: 5vw; height: 4vw; font-size: 2vw; display: flex; justify-content: center;  align-items: center;">
							<i class="fa-solid fa-flask-vial"></i>
						</button>
						<span class="formlabel textColor" style="text-wrap: nowrap;">@LangResources["Patient_Label_TestManagement"]</span>
					</div>
				</div>

				<div style="display: flex; margin-bottom: 1.5vw;">
					<div class="field-container quaterSize" style="display: flex; align-items: center;">
						<button class="btn btn-lg btn-primary" style="width: 5vw; height: 4vw; font-size: 2vw; display: flex; justify-content: center;  align-items: center;" onclick="openScheduledModal();">
							<i class="fa-solid fa-clock"></i>
						</button>
						<span class="formlabel textColor">@LangResources["Patient_Label_ScheduledTest"]</span>
					</div>
					<div class="field-container quaterSize" style="display: flex; align-items: center;">&nbsp;</div>
				</div>
				

			</div>

			<div class="containerBackground2" style="width: 23vw; padding: 0.7vw; padding-left: 1.5vw; border-top-left-radius: 0.5vw; border-top-right-radius: 0.5vw;">
				<span class="formlabel" style="margin-bottom: 0 !important;">@LangResources["Patient_Title_UpcomingAppointment"]</span>
			</div>
			<div class="containerBorder" id="UpcomingAppointment" style="background-color: #c8dcfc; color: darkgray; width: 23vw; border-style: none; border-bottom-left-radius: 0.5vw; border-bottom-right-radius: 0.5vw; padding: 2vw; padding-left: 0.5vw; padding-right: 0.5vw; padding-bottom: 0.4vw;">
			</div>
		</div>

	</div>
</div>

<!-- Modal -->
<div class="modal fade" id="healthCardModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true" style="--bs-modal-width: unset; margin: 2vw auto;">

	<style>
		.hideContainer {
			display: none !important;
		}

		@@media print {
			/* All your print styles go here */
			.printFont {
				font-size: 2vw !important;
			}

			.printImg {
				width: 10vw !important;
			}
		}

		.modal-content-custom {
			border: 0.1vw solid !important;
			padding: 1vw;
		}
	</style>

	<div class="modal-dialog" style="margin: 0 auto; width: fit-content;">
		<div class="modal-content">
			<div class="modal-header" style="display: flex; justify-content: flex-end; --bs-modal-header-border-color: none; padding-bottom: 0;">
				<button type="button" onclick="downloadHealthCard();" style="margin-right: 1vw; display: flex; justify-content: center;  align-items: center; font-size: 1vw; width: 1vw;" class="btn btn-lg btn-primary" data-bs-dismiss="modal">
					<i class="fa-solid fa-download"></i>
				</button>
				<button type="button" onclick="printHealthCard();" style="display: flex; justify-content: center;  align-items: center; font-size: 1vw; width: 1vw;" class="btn btn-lg btn-primary" data-bs-dismiss="modal"><i class="fa-solid fa-print"></i></button>
			</div>
			<div class="modal-body" style="display: flex;">
				<div style="margin: 0 1vw;">
					<img class="printImg" src="~/images/Cat profile image.png" style="width: 6vw; margin-bottom: 2vw;" />

					<div style="display: flex; flex-direction: column; margin: 1vw 0;">
						<span class="printFont" style="color: darkgray; font-size: 1vw;">@LangResources["Patient_Label_PetName"]</span>
						<span class="printFont" style="color: black; font-size: 1vw;">@ViewData["PetName"]</span>
					</div>

					<div style="display: flex; flex-direction: column; margin: 1vw 0;">
						<span class="printFont" style="color: darkgray; font-size: 1vw;">@LangResources["Patient_Label_RegistrationNo"]:</span>
						<span class="printFont" style="color: black; font-size: 1vw;">@Model.RegistrationNo</span>
					</div>
				</div>

				<hr style="border: 0.1vw solid black; margin: 0 1vw;">

				<div>
					<div style="margin-bottom: 2vw; padding: 1vw;">
						<span class="printFont" style="font-weight: bold; font-size: 1vw; padding: 0 2vw;">@LangResources["Patient_Title_VaccinationTreatmentHistory"]</span>

						<table class="printFont" id="HealthCardHistory" style="font-size: 1vw; margin-top: 1vw;">
							<tr>
								<th style="color: darkgray; padding: 0 2vw;">@LangResources["Patient_Label_Date"]</th>
								<th style="color: darkgray; padding: 0 2vw;">@LangResources["Patient_Label_VaccinationTreatment"]</th>
								<th style="color: darkgray; padding: 0 2vw;">@LangResources["Patient_Label_Name"]</th>
							</tr>
							@* <tr>
								<td style="padding: 0 2vw;">01/09/2023</td>
								<td style="padding: 0 2vw;">Rabbies Vaccinations</td>
								<td style="padding: 0 2vw;">Defensor 1 - Rabies</td>
							</tr>
							<tr>
								<td style="padding: 0 2vw;">01/09/2023</td>
								<td style="padding: 0 2vw;">Rabbies Vaccinations</td>
								<td style="padding: 0 2vw;">Defensor 1 - Rabies</td>
							</tr>
							<tr>
								<td style="padding: 0 2vw;">01/09/2023</td>
								<td style="padding: 0 2vw;">Rabbies Vaccinations</td>
								<td style="padding: 0 2vw;">Defensor 1 - Rabies</td>
							</tr>
							<tr>
								<td style="padding: 0 2vw;">01/09/2023</td>
								<td style="padding: 0 2vw;">Rabbies Vaccinations</td>
								<td style="padding: 0 2vw;">Defensor 1 - Rabies</td>
							</tr> *@
						</table>
					</div>

					<div style="margin: 2vw 0; padding: 1vw;">
						<span class="printFont" style="font-weight: bold; font-size: 1vw; padding: 0 2vw;">@LangResources["Patient_Title_MedicationHistory"]</span>

						<table class="printFont" id="HealthCardMedication" style="font-size: 1vw; margin-top: 1vw;">
							<tr>
								<th style="color: darkgray; padding: 0 2vw;">@LangResources["Patient_Label_Date"]</th>
								<th style="color: darkgray; padding: 0 2vw;">@LangResources["Patient_Label_MedicationName"]</th>
								<th style="color: darkgray; padding: 0 2vw;" hidden>@LangResources["Patient_Label_Status"]</th>
							</tr>
							@* <tr>
								<td style="padding: 0 2vw;">01/09/2023</td>
								<td style="padding: 0 2vw;">Prednisalone Suspension 5mg|10ml</td>
								<td style="padding: 0 2vw;">Active</td>
							</tr> *@
						</table>
					</div>

					<div style="margin: 2vw 0; background-color: whitesmoke; padding: 1vw; border-radius: 0.5vw;">
						<span class="printFont" style="font-weight: bold; font-size: 1vw; padding: 0 2vw;">@LangResources["Patient_Title_UpcomingVaccinationTreatment"]</span>

						<table class="printFont" id="HealthCardUpcoming" style="font-size: 1vw; margin-top: 1vw;">
							<tr>
								<th style="color: darkgray; padding: 0 2vw;">@LangResources["Patient_Label_Date"]</th>
								<th style="color: darkgray; padding: 0 2vw;">@LangResources["Patient_Label_VaccinationTreatment"]</th>
								<th style="color: darkgray; padding: 0 2vw;">@LangResources["Patient_Label_Name"]</th>
							</tr>
							@* <tr>
								<td style="padding: 0 2vw;">01/09/2023</td>
								<td style="padding: 0 2vw;">Rabbies Vaccinations</td>
								<td style="padding: 0 2vw;">Defensor 1 - Rabies</td>
							</tr> *@
						</table>
					</div>

				</div>
			</div>
		</div>
	</div>
</div>

<!-- Scheduled Test -->
<div id="modalScheduled" class="modal fade" tabindex="-1" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered">
		<div class="modal-content" style="width: 700px; height: auto; background-color: #f7f7f7; font-family: sans-serif; font-size: 14px;">
			<div class="modal-header" style="border-bottom: 0px; text-align: right !important">
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body" style="padding: 0px;">
				<div class="row">
					<div class="col-md-12 ms-5">
						<label style="font-size: 17px; font-weight: bold;">@LangResources["Patient_Title_CreateScheduleTests"]</label>
					</div>
				</div>
				<div class="row mt-3">
					<div class="col-md-1">&nbsp;</div>
					<div class="col-md-5" style="border: 0px solid black;">
						<label for="dtSchedule" style="width: 100%; font-size: 14px; font-weight: bold">@LangResources["Patient_Label_Date"]</label>
						<input id="dtSchedule" class="form-control-sm" />
					</div>
					<div class="col-md-5">
						<label for="tmSchedule" style="font-size: 14px; font-weight: bold">@LangResources["Patient_Label_Time"]</label>
						<input id="tmSchedule" class="form-control-sm" style="border: 1px solid #ddd; background-color: white;" />
					</div>
					<div class="col-md-1">&nbsp;</div>
				</div>
				<div class="row mb-3" style="border: 0px solid black;">
					<div class="col-md-1">&nbsp;</div>
					<div class="col-md-10">
						<label for="ddlLocation" style="font-size: 14px; font-weight: bold">@LangResources["Patient_Label_Location"]</label>
						<select id="ddlLocation" class="form-select form-select-sm">
							<option value="">@LangResources["Patient_Label_SelectLocation"]</option>
							@foreach (var l in ViewData["LocationList"] as List<VPMS.Lib.Data.Models.LocationModel>)
							{
								<option value="@l.System_LocationID">@l.System_LocationName</option>
							}
						</select>
					</div>
					<div class="col-md-1">&nbsp;</div>
				</div>
				<div class="row mb-3">
					<div class="col-md-1">&nbsp;</div>
					<div class="col-md-10">
						<label for="ddlTests" style="font-size: 14px; font-weight: bold;">@LangResources["Patient_Label_Tests"]</label>
						<select id="ddlTests" class="form-select form-select-sm">
							<option value="">@LangResources["Patient_Label_SelectTests"]</option>
							@foreach (var t in ViewData["TestsList"] as List<VPMS.Lib.Data.Models.TestsListModel>)
							{
								<option value="@t.System_TestID">@t.System_TestName</option>
							}
						</select>
					</div>
					<div class="col-md-1">&nbsp;</div>
				</div>
				<div class="row mb-3">
					<div class="col-md-1">&nbsp;</div>
					<div class="col-md-10">
						<label style="font-size: 14px; font-weight: bold;">@LangResources["Patient_Label_InchargesDoctor"]</label>
						<select id="ddlDoctor" class="form-select form-select-sm">
							<option value="">@LangResources["Patient_Label_SelectInchargeDoctor"]</option>
							@foreach (var d in ViewData["DoctorList"] as List<VPMS.Lib.Data.Models.DoctorModel>)
							{
								<option value="@d.ID">@d.Name</option>
							}
						</select>
					</div>
					<div class="col-md-1">&nbsp;</div>
				</div>
				<div class="row">
					<div class="col-md-4">&nbsp;</div>
					<div class="col-md-5">
						<label id="lbError" style="color: red;"></label>
					</div>
					<div class="col-md-3">&nbsp;</div>
				</div>
				<div class="row mt-2">
					<div class="col-md-4">&nbsp;</div>
					<div class="col-md-5">
						<button id="btnCreate" class="btn btn-primary" onclick="SubmitScheduledTest();">@LangResources["Patient_Button_Submit"]</button>
						<button id="btnCancel" class="btn btn-secondary" data-bs-dismiss="modal" aria-label="Close">@LangResources["Patient_Button_Cancel"]</button>
					</div>
					<div class="col-md-3">&nbsp;</div>
				</div>
				<div class="row mt-2">&nbsp;</div>
			</div>
		</div>
	</div>
</div>

<span id="age" hidden>@LangResources["Patient_Label_Age"]</span>
<span id="bmi" hidden>@LangResources["Patient_Label_BMI"]</span>
<span id="weight" hidden>@LangResources["Patient_Label_Weight"]</span>
<span id="height" hidden>@LangResources["Patient_Label_Height"]</span>
<span id="year" hidden>@LangResources["Patient_Label_Year"]</span>

<script>
	// const age = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
	// const weight = [7, 8, 8, 9, 9, 9, 10, 11, 14, 14, 15];
	// const height = [17, 18, 18, 19, 19, 19, 10, 11, 14, 14, 15];
	// const bmi = [16.5, 27.4, 16.5, 27.4, 16.5, 27.4, 16.5, 27.4, 16.5, 27.4, 16.5];
	var age = [];
	var weight = [];
	var height = [];
	var bmi = [];
	var chartElement;
	var xData, yData, xLable, yLabel;
	var borderOpacity = "0.1";
	var axisColor = "black";
	var currentGraph = "";

	getPetGrowth();

	function getPetGrowth() {
		fetch('/Patients/GetPetGrowth?petID=' + document.querySelector("#PetID").value)
			.then(response => {
				if (!response.ok) {
					throw new Error('Network response was not ok');
				}
				return response.json();
			})
			.then(data => {
				
				var tableElement = document.getElementById("petGrowthTable");

				for (let i = 0; i < data.length; i++) {
					var obesity = "@LangResources["Patient_Selection_No"]";
					var color = "green";

					if (data[i].BMI > 30) {
						obesity = "@LangResources["Patient_Selection_Yes"]";
						color = "red";
					}

					var date = new Date(data[i].CreatedDate);
					var dateText = date.getDate() + "/" + date.getMonth() + "/" + date.getFullYear();

					age.push(data[i].Age);
					weight.push(data[i].Weight);
					height.push(data[i].Height);
					bmi.push(data[i].BMI);

					var rowContent =
						'<tr style="border-bottom-width: 0.1vw; height: 3.3vw;">' +
						'<td class="table-content" > ' + dateText + ' </td >' +
						'<td class="table-content"> ' + data[i].Age + ' </td>' +
						'<td class="table-content"> ' + data[i].Height + ' </td>' +
						'<td class="table-content"> ' + data[i].Weight + ' </td>' +
						'<td class="table-content"> ' + data[i].Allergies + ' </td>' +
						'<td class="table-content" style="color: ' + color + ';"> ' + obesity + ' </td>' +
						'</tr> ';

					tableElement.innerHTML = tableElement.innerHTML + rowContent;
				}

				changeChart("BMI", document.getElementById("bmi").innerHTML);

			})
			.catch(error => {
				console.error('There was a problem with the fetch operation:', error);
			});
	}
	

	function changeChart(name, element) {
		if (name != "current") {
			document.getElementById("chartSelection").innerHTML = element;
		}

		if(name != currentGraph){
			if (name != "current") {
				currentGraph = name;
			}

			if (chartElement) {
				chartElement.chart.destroy();
			}

			xData = age;
			xLable = document.getElementById("age").innerHTML;

			if (name == 'Weight') {
				yData = weight;
				yLabel = document.getElementById("weight").innerHTML + " (kg)";
			}
			else if (name == 'Height') {
				yData = height;
				yLabel = document.getElementById("height").innerHTML + " (cm)";
			}
			else if (name == 'BMI') {
				yData = bmi;
				yLabel = document.getElementById("bmi").innerHTML;
			}

			chartElement = new Chart("myChart", {
				type: "line",
				data: {
					labels: xData,
					datasets: [{
						label: yLabel,
						fill: false,
						backgroundColor: "rgba(0,0,255,1.0)",
						borderColor: "rgba(0,0,255," + borderOpacity + ")",
						data: yData
					}]
				},
				options: {
					locale: '@LangResources["Locale"]',
					legend: { display: false },
					scales: {
						yAxes: [{
							scaleLabel: {
								display: true,
								labelString: yLabel
							},
							gridLines: {
								drawOnChartArea: false
							},
							ticks: { beginAtZero: true, fontColor: axisColor }
						}],
						xAxes: [{
							scaleLabel: {
								display: true,
								labelString: xLable
							},
							gridLines: {
								drawOnChartArea: false
							},
							ticks: { fontColor: axisColor }
						}]
					},
					tooltips: {
						enabled: true,
						callbacks: {
							title: function (tooltipItem, data) {
								var title = document.getElementById("year").innerHTML + ' ' + tooltipItem[0].xLabel;
								return title;
							}
						}
					}
				}
			});
		}
		
		
	}
</script>

<script>
	var species = document.querySelector(".Species").value;
	var breedElement = document.querySelector(".Breed");
	breedList(species, breedElement, '@ViewBag.Breed');
	var serviceToDelete = [];
	var medicationToDelete = [];

	getMedicalRecord();
	getUpcomingTreatmentPlan();
	GetVaccinationTreatmentList(0, false);
	GetHealthCardMedicationList();
	GetUpcomingAppointment();

	if ('@ViewBag.type' == 'edit') {
		editPetInfo();
	}

	$(document).ready(function() {
		$('#dtSchedule').datepicker({
			 uiLibrary: 'bootstrap5',
			 format: 'dd/mm/yyyy'
		});

		$('#tmSchedule').datetimepicker({
			 useCurrent: false,
			 format: 'HH:mm',
			 icons: {
				 up: 'fa fa-angle-up',
				 down: 'fa fa-angle-down'
			 }
		}).on('dp.show', function () {
			 time = "09:00 AM";
			 $(this).data('DateTimePicker').minDate(time);
		}).on('dp.change', function () {

		});
	});

	function SubmitScheduledTest()
	{
		if (validateSubmission())
		{
			$.post("/Patients/SubmitScheduledTests", {
				scheduledDate: $('#dtSchedule').val(),
				scheduledTime: $('#tmSchedule').val(),
				locationID: $('#ddlLocation').val(),
				locationName: $('#ddlLocation option:selected').text(),
				testID: $('#ddlTests').val(),
				testName: $('#ddlTests option:selected').text(),
				patientID: '@ViewBag.PatientID',
				patientName: '@Model.Name',
				gender: '@Model.Gender',
				species: '@Model.Species',
				doctorIncharges: $('#ddlDoctor option:selected').text(),
				submittedBy:  ''
			}).done(function(result){
				if (result.StatusCode == 200){
					//ShowSuccessMsgBox('Submit Schedule Tests', 'Schedule Tests sent successfully.',
					ShowSuccessMsgBox('@Html.Raw(LangResources["Patient_Title_SubmitScheduleTests"])', 
									  '@Html.Raw(LangResources["Patient_Message_ScheduleTestsSentSuccess"])',
						function(){
							window.location.reload();
						}
					);
				}
				else {
					//ShowSuccessMsgBox('Submit Schedule Tests', 'Schedule Tests fail to send, please try again later.',
					ShowSuccessMsgBox('@Html.Raw(LangResources["Patient_Title_SubmitScheduleTests"])', 
									 '@Html.Raw(LangResources["Patient_Message_ScheduleTestsFailToSend"])',
						function(){}
					);
				}
			});
		}
		else 
		{
			//$('#lbError').html('Mandatory fields required.');
			$('#lbError').html('@Html.Raw(LangResources["Patient_Message_MandatoryFieldsRequired"])');
		}

	}

	function validateSubmission()
	{
		$('#lbError').html('');
		let isValid = true;


		if ($('#dtSchedule').val() == '')
		{
			$('#dtSchedule').addClass("errorValidation");
			$('#dtSchedule').focus();

			isValid = false;
		}
		else 
		{
			$('#dtSchedule').removeClass("errorValidation");
		}

		if ($('#tmSchedule').val() == '')
		{
			$('#tmSchedule').addClass("errorValidation");
			$('#tmSchedule').focus();

			isValid = false;
		}
		else {
			$('#tmSchedule').removeClass("errorValidation");
		}

		if ($('#ddlLocation').val() == '')
		{
			$('#ddlLocation').addClass("errorValidation");
			$('#ddlLocation').focus();

			isValid = false;
		}
		else 
		{
			$('#ddlLocation').removeClass("errorValidation");
		}

		if ($('#ddlTests').val() == '')
		{
			$('#ddlTests').addClass("errorValidation");
			$('#ddlTests').focus();

			isValid = false;
		}
		else 
		{
			$('#ddlTests').removeClass("errorValidation");
		}

		if ($('#ddlDoctor').val() == '')
		{
			$('#ddlDoctor').addClass("errorValidation");
			$('#ddlDoctor').focus();

			isValid = false;
		}
		else {
			$('#ddlDoctor').removeClass("errorValidation");
		}

		return isValid;
	}

	function updateAge(e){
		var currentDate = new Date();
		var petDOB = new Date(e.value);
		var yearDiffer = currentDate.getFullYear() - petDOB.getFullYear();
		var monthDiffer = currentDate.getMonth() - petDOB.getMonth() + (12 * yearDiffer);
		var yearText = "";

		yearText = (monthDiffer / 12) + "";

		var AgeElement = document.querySelectorAll(".Age")
		AgeElement[0].value = parseInt(yearText);
	}

	function editPetInfo(submit) {
		var element = document.querySelectorAll('.petInfoProfile');

		for (let i = 0; i < element.length; i++) {
			element[i].classList.toggle("hideContainer");
		}

		if (submit) {
			submitPetInfoUpdate();
		}
	}

	function editMedicalRecord(){
		var element = document.querySelectorAll('.medicalRecord');

		for (let i = 0; i < element.length; i++) {
			element[i].classList.toggle("hideContainer");
		}
	}

	function cloneElement(templateId, contentId) {
		const template = document.getElementById(templateId)
		const clone = template.content.cloneNode(1).firstElementChild

		var element = document.querySelector('#' + contentId);
		element.appendChild(clone);
	}

	function cloneServices(templateId, contentId, name, medicalRecordID, typeId, serviceId, createdOn, dueDate, description, remarks, createdBy) {
		const template = document.getElementById(templateId)
		const clone = template.content.cloneNode(1).firstElementChild;

		clone.querySelector('.ID' + name).value = medicalRecordID;

		if (medicalRecordID != 0) {
			clone.querySelector('.CreatedDate' + name).value = createdOn;
			clone.querySelector('.CreatedBy' + name).value = createdBy;

			var serviceTypeElement = clone.querySelector('.Type' + name);
			serviceTypeElement.value = typeId;
			var selectedServiceType = serviceTypeElement.options[serviceTypeElement.selectedIndex];
			clone.querySelector('.Type' + name + 'Text').innerHTML = selectedServiceType.innerHTML;

			var serviceElement = clone.querySelector('.Name' + name);
			var serviceElementText = clone.querySelector('.Name' + name + 'Text');
			serviceList(typeId, serviceElement, name, true, serviceId, serviceElementText);

			var date = new Date(createdOn);
			var createdOnText = [
				('0' + date.getDate()).slice(-2),
				('0' + (date.getMonth() + 1)).slice(-2),
				date.getFullYear()
			].join('/');
			date = new Date(dueDate);
			var dueDateText = [
				('0' + date.getDate()).slice(-2),
				('0' + (date.getMonth() + 1)).slice(-2),
				date.getFullYear()
			].join('/');
			clone.querySelector('.CreatedOn' + name + 'Text').innerHTML = createdOnText;
			clone.querySelector('.DueDate' + name + 'Text').innerHTML = "@LangResources["Patient_Label_Due"]: " + dueDateText;
			clone.querySelector('.DueDate' + name).value = dueDate;
			clone.querySelector('.Description' + name + 'Text').innerHTML = description;
			clone.querySelector('.Remarks' + name + 'Text').innerHTML = remarks;
			clone.querySelector('.Remarks' + name).value = remarks;
		}		
		else{
			// clone.querySelector('.CreatedDate' + name).value = new Date();
			clone.querySelector('.CreatedBy' + name).value = "System";

			var element = clone.querySelectorAll('.medicalRecord');

			for (let i = 0; i < element.length; i++) {
				element[i].classList.toggle("hideContainer");
			}
		}

		var element = document.querySelector('#' + contentId);
		element.appendChild(clone);
	}

	function cloneMedication(templateId, contentId, name, medicalRecordID, typeId, productId, status, dueDate, description, createdDate, createdBy) {
		const template = document.getElementById(templateId)
		const clone = template.content.cloneNode(1).firstElementChild;
		
		clone.querySelector('.ID' + name).value = medicalRecordID;

		if(medicalRecordID != 0){
			clone.querySelector('.CreatedDate' + name).value = createdDate;
			clone.querySelector('.CreatedBy' + name).value = createdBy;

			var productTypeElement = clone.querySelector('.Type' + name);
			productTypeElement.value = typeId;
			var selectedProductType = productTypeElement.options[productTypeElement.selectedIndex];
			clone.querySelector('.Type' + name + 'Text').innerHTML = selectedProductType.innerHTML;

			var productElement = clone.querySelector('.Name' + name);
			var productElementText = clone.querySelector('.Name' + name + 'Text');
			medicationList(typeId, productElement, true, productId, productElementText);

			date = new Date(dueDate);
			var dueDateText = [
				('0' + date.getDate()).slice(-2),
				('0' + (date.getMonth() + 1)).slice(-2),
				date.getFullYear()
			].join('/');
			clone.querySelector('.Status' + name + 'Text').innerHTML = (status == 1 ? "@LangResources["Patient_Selection_Active"]" : "@LangResources["Patient_Selection_Inactive"]");
			clone.querySelector('.DueDate' + name + 'Text').innerHTML = "@LangResources["Patient_Label_Expiry"]: " + dueDateText;
			clone.querySelector('.DueDate' + name).value = dueDate;
			clone.querySelector('.Description' + name + 'Text').innerHTML = description;
		}
		else{
			clone.querySelector('.CreatedBy' + name).value = createdBy;

			var element = clone.querySelectorAll('.medicalRecord');

			for (let i = 0; i < element.length; i++) {
				element[i].classList.toggle("hideContainer");
			}
		}		

		var element = document.querySelector('#' + contentId);
		element.appendChild(clone);
	}

	function removeClone(e) {
		var parent = e.remove();
	}

	function changeSpecies(e) {
		var breedElement = document.querySelector(".Breed");
		breedList(e.value, breedElement, "");
	}

	function getMedicalRecord(){
		fetch('/Patients/GetMedicalRecordServicesByPetID?petID=' + document.querySelector("#PetID").value)
			.then(response => {
				if (!response.ok) {
					throw new Error('Network response was not ok');
				}
				return response.json();
			})
			.then(data => {

				for(let i = 0; i < data.length; i++){
					if(data[i].Type == 1){
						cloneServices("VaccinationTemplate", "VaccinationContent", "Vaccination", data[i].ID, data[i].CategoryID, data[i].ServiceID, data[i].CreatedDate, data[i].DueDate, data[i].Description, data[i].Remarks, data[i].CreatedBy);
					}
					else{
						cloneServices("SurgeriesTemplate", "SurgeriesContent", "Surgeries", data[i].ID, data[i].CategoryID, data[i].ServiceID, data[i].CreatedDate, data[i].DueDate, data[i].Description, data[i].Remarks, data[i].CreatedBy);
					}					
				}

				
				
			})
			.catch(error => {
				console.error('There was a problem with the fetch operation:', error);
			});


		fetch('/Patients/GetMedicalRecordMedicationByPetID?petID=' + document.querySelector("#PetID").value)
			.then(response => {
				if (!response.ok) {
					throw new Error('Network response was not ok');
				}
				return response.json();
			})
			.then(data => {

				for(let i = 0; i < data.length; i++){
					cloneMedication("MedicationTemplate", "MedicationContent", "Medication", data[i].ID, data[i].CategoryID, data[i].ProductID, data[i].Status, data[i].ExpiryDate, data[i].Description, data[i].CreatedDate, data[i].CreatedBy);				
				}
			})
			.catch(error => {
				console.error('There was a problem with the fetch operation:', error);
			});
	}

	function serviceList(id, element, name, selected, serviceID, textElement){
		fetch('/PatientServices/GetServiceByCategory?categoryID=' + id)
			.then(response => {
				if (!response.ok) {
					throw new Error('Network response was not ok');
				}
				return response.json();
			})
			.then(data => {

				if(selected){
					element.innerHTML = '<option value=""> -- Select ' + name + ' -- </option>';
				}
				else{					
					element.innerHTML = '<option value="" selected> -- Select ' + name + ' -- </option>';
				}


				for (let i = 0; i < data.length; i++) {
					if(selected && data[i].ID == serviceID){
						element.innerHTML = element.innerHTML + '<option value="' + data[i].ID + '"  data-description="' + data[i].Description + '" selected>' + data[i].Name + '</option>';
						textElement.innerHTML = data[i].Name;
					}
					else{
						element.innerHTML = element.innerHTML + '<option value="' + data[i].ID + '"  data-description="' + data[i].Description + '">' + data[i].Name + '</option>';
					}
					
				}
			})
			.catch(error => {
				console.error('There was a problem with the fetch operation:', error);
			});
	}

	function medicationList(id, element, selected, productID, textElement) {
		fetch('/Inventory/GetInventoryByCategory?categoryID=' + id)
			.then(response => {
				if (!response.ok) {
					throw new Error('Network response was not ok');
				}
				return response.json();
			})
			.then(data => {

				if(selected){
					element.innerHTML = '<option value=""> -- Select Medication -- </option>';
				}
				else{
					element.innerHTML = '<option value="" selected> -- Select Medication -- </option>';
				}

				for (let i = 0; i < data.length; i++) {
					if(selected && data[i].ID == productID){
						element.innerHTML = element.innerHTML + '<option value="' + data[i].ID + '"  data-description="' + data[i].Description + '" selected>' + data[i].Name + '</option>';
						textElement.innerHTML = data[i].Name;
					}
					else{
						element.innerHTML = element.innerHTML + '<option value="' + data[i].ID + '"  data-description="' + data[i].Description + '">' + data[i].Name + '</option>';
					}
				}
			})
			.catch(error => {
				console.error('There was a problem with the fetch operation:', error);
			});
	}

	function breedList(species, breedElement, breedValue) {
		fetch('/Patients/BreedList?species=' + species)
			.then(response => {
				if (!response.ok) {
					throw new Error('Network response was not ok');
				}
				return response.json();
			})
			.then(data => {

				if (breedValue != "") {
					breedElement.innerHTML = '<option value=""> -- Select Breed -- </option>';
				}
				else {
					breedElement.innerHTML = '<option value="" selected> -- Select Breed -- </option>';
				}

				for (let i = 0; i < data.length; i++) {
					if (breedValue == data[i].Breed) {
						breedElement.innerHTML = breedElement.innerHTML + '<option value="' + data[i].Breed + '" selected>' + data[i].Breed + '</option>';
					}
					else {
						breedElement.innerHTML = breedElement.innerHTML + '<option value="' + data[i].Breed + '">' + data[i].Breed + '</option>';
					}
				}
			})
			.catch(error => {
				console.error('There was a problem with the fetch operation:', error);
			});
	}

	function getUpcomingTreatmentPlan() {
		fetch('/Patients/GetUpcomingTreatmentPlan?petID=@Model.ID')
			.then(response => {
				if (!response.ok) {
					throw new Error('Network response was not ok');
				}

				return response.json();
			})
			.then(data => {
				GetVaccinationTreatmentList(data.ID, true);
			})
			.catch(error => {
				console.error('There was a problem with the fetch operation:', error);
			});
	}

	function GetVaccinationTreatmentList(id, upcoming) {
		fetch('/Patients/GetVaccinationTreatmentList?planID=' + id + '&upcoming=' + upcoming + '&petID=@Model.ID')
			.then(response => {
				if (!response.ok) {
					throw new Error('Network response was not ok');
				}

				return response.json();
			})
			.then(data => {
				var tableElement;

				if (upcoming) {
					tableElement = document.getElementById("HealthCardUpcoming");
				}
				else {
					tableElement = document.getElementById("HealthCardHistory");
				}


				if (data.length == 0) {
					tableElement.innerHTML = tableElement.innerHTML + '<tr> <td colspan="3" style="text-align: center;"> @LangResources["Patient_Message_NoRecord"] <td> </tr>';
				}
				else {
					for (let i = 0; i < data.length; i++) {
						var date = new Date(data[i].Date);

						var dateText = [
							('0' + date.getDate()).slice(-2),
							('0' + (date.getMonth() + 1)).slice(-2),
							date.getFullYear()
						].join('/');

						tableElement.innerHTML = tableElement.innerHTML +
							'<tr>' +
							'<td style="padding: 0 2vw;"> ' + dateText + '</td>' +
							'<td style="padding: 0 2vw;">' + data[i].CategoryName + '</td>' +
							'<td style="padding: 0 2vw;">' + data[i].ServiceName + '</td>' +
							'</tr > '
					}
				}

			})
			.catch(error => {
				console.error('There was a problem with the fetch operation:', error);
			});
	}

	function GetHealthCardMedicationList() {
		fetch('/Patients/GetHealthCardMedicationList?petID=@Model.ID')
			.then(response => {
				if (!response.ok) {
					throw new Error('Network response was not ok');
				}

				return response.json();
			})
			.then(data => {
				var tableElement = document.getElementById("HealthCardMedication");


				if (data.length == 0) {
					tableElement.innerHTML = tableElement.innerHTML + '<tr> <td colspan="3" style="text-align: center;"> @LangResources["Patient_Message_NoRecord"] <td> </tr>';
				}
				else {
					for (let i = 0; i < data.length; i++) {
						var date = new Date(data[i].Date);

						var dateText = [
							('0' + date.getDate()).slice(-2),
							('0' + (date.getMonth() + 1)).slice(-2),
							date.getFullYear()
						].join('/');

						var status = data[i].Status == 1 ? "@LangResources["Patient_Selection_Active"]" : "@LangResources["Patient_Selection_Inactive"]";

						tableElement.innerHTML = tableElement.innerHTML +
							'<tr>' +
							'<td style="padding: 0 2vw;"> ' + dateText + '</td>' +
							'<td style="padding: 0 2vw;">' + data[i].Name + '</td>' +
							'<td style="padding: 0 2vw;" hidden>' + status + '</td>' +
							'</tr > '
					}
				}

			})
			.catch(error => {
				console.error('There was a problem with the fetch operation:', error);
			});
	}

	function GetUpcomingAppointment() {
		fetch('/Appointment/GetUpcomingAppointment?ownerID=0&petID=@Model.ID')
			.then(response => {
				if (!response.ok) {
					throw new Error('Network response was not ok');
				}
				return response.json();
			})
			.then(data => {
				var element = document.getElementById("UpcomingAppointment");

				if (data.PetName == null) {
					element.innerHTML = '<div style="margin-bottom: 1.5vw; text-align: center;">@LangResources["Patient_Label_NoUpcomingAppointment"]</div>'
				}else{

					var date = new Date(data.ApptDate);

					var dateText = [
						('0' + date.getDate()).slice(-2),
						('0' + (date.getMonth() + 1)).slice(-2),
						date.getFullYear()
					].join('/');

					var time = data.ApptStartTime.slice(0, -3) + " - " + data.ApptEndTime.slice(0, -3)

					element.innerHTML =
						'<div style="display: flex; margin-bottom: 1.5vw;">' +
						'<div class="field-container quaterSize" >' +
						'<span class="formlabel">@LangResources["Patient_Label_Date"]</span>' +
						'<span class="formlabel" style="color: black;">' + dateText + '</span>' +
						'</div >' +

						'<div class="field-container quaterSize">' +
						'<span class="formlabel">@LangResources["Patient_Label_Time"]</span>' +
						'<span class="formlabel" style="color: black;">' + time + '</span>' +
						'</div>' +
						'</div >' +


						'<div style="display: flex; margin-bottom: 1.5vw;">' +
						'<div class="field-container quaterSize">' +
						'<span class="formlabel">@LangResources["Patient_Label_Pet"]</span>' +
						'<span class="formlabel" style="color: black;">' + data.PetName + '</span>' +
						'</div>' +

						'<div class="field-container quaterSize">' +
						'<span class="formlabel">@LangResources["Patient_Label_Service"]</span>' +
						'<span class="formlabel" style="color: black;">' + data.Service + '</span>' +
						'</div>' +
						'</div>' +


						'<div style="display: flex; margin-bottom: 1.5vw;">' +
						'<div class="field-container quaterSize">' +
						'<span class="formlabel">@LangResources["Patient_Label_Doctor"]</span>' +
						'<span class="formlabel" style="color: black;">' + data.Doctor + '</span>' +
						'</div>' +
						'</div>';
				}

			})
			.catch(error => {
				console.error('There was a problem with the fetch operation:', error);
			});
	}

	function submitPetInfoUpdate() {
		var PetNameElement = document.querySelectorAll(".PetName")
		var RegistrationNoElement = document.querySelectorAll(".RegistrationNo")
		var GenderElement = document.querySelectorAll(".Sex")
		var DOBElement = document.querySelectorAll(".DOB")
		var AgeElement = document.querySelectorAll(".Age")
		var SpeciesElement = document.querySelectorAll(".Species")
		var BreedElement = document.querySelectorAll(".Breed")
		var ColorElement = document.querySelectorAll(".Color")
		var AllergiesElement = document.querySelectorAll(".Allergies")
		var WeightElement = document.querySelectorAll(".Weight")
		var HeightElement = document.querySelectorAll(".Height")
		var StatusElement = document.querySelectorAll(".Status")


		var obj = {
			ID: document.querySelector("#PetID").value,
			PatientID: @ViewBag.PatientID,
			Name: PetNameElement[0].value,
			RegistrationNo: RegistrationNoElement[0].value,
			Gender: GenderElement[0].value,
			DOB: DOBElement[0].value,
			Age: AgeElement[0].value,
			Species: SpeciesElement[0].value,
			Breed: BreedElement[0].value,
			Color: ColorElement[0].value,
			Allergies: AllergiesElement[0].value,
			Weight: WeightElement[0].value,
			WeightUnit: "kg",
			Height: HeightElement[0].value,
			HeightUnit: "cm",
			Status: StatusElement[0].value,
			CreatedDate: document.querySelector("#PetCreatedDate").value,
			CreatedBy: document.querySelector("#PetCreatedBy").value,
			UpdatedDate: new Date(),
			UpdatedBy: "Admin"
		}

		fetch('/Patients/UpdatePetInfo', {
			method: 'post',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify(obj)
		})
			.then(response => {
				if (!response.ok) {
					throw new Error('Network response was not ok');
				}

				location.reload();

				// // PetNameElement[1].innerHTML = PetNameElement[0].value;
				// RegistrationNoElement[1].innerHTML = RegistrationNoElement[0].value;

				// if (GenderElement[0].value == "M") { GenderElement[1].innerHTML = "Male"; }
				// else { GenderElement[1].innerHTML = "Female"; }
				
				// // var date = new Date(DOBElement[0].value);
				// // DOBElement[1].innerHTML = date.getDate() + "/" + (date.getMonth() + 1) + "/" + date.getFullYear();

				// // AgeElement[1].innerHTML = AgeElement[0].value;
				// // SpeciesElement[1].innerHTML = SpeciesElement[0].value;
				// BreedElement[1].innerHTML = BreedElement[0].value;
				// ColorElement[1].innerHTML = ColorElement[0].value;
				// AllergiesElement[1].innerHTML = AllergiesElement[0].value;
				// WeightElement[1].innerHTML = WeightElement[0].value;
				// HeightElement[1].innerHTML = HeightElement[0].value;

				// if (StatusElement[0].value == 1) { StatusElement[1].innerHTML = "Active"; }
				// else { StatusElement[1].innerHTML = "Inactive"; }

			})
			.catch(error => {
				console.error('There was a problem with the fetch operation:', error);
			});
	}	

	function submitMedicalRecord(e){
		if (validationCheck(e)) {
			var vaccinations = e.querySelectorAll(".VaccinationGroup");
			var surgeries = e.querySelectorAll(".SurgeryGroup");
			var medications = e.querySelectorAll(".MedicationGroup");

			for (let i = 0; i < vaccinations.length; i++) {
				saveMedicalRecordService(document.querySelector("#PetID").value, "Vaccination", vaccinations[i], 1);
			}

			for (let i = 0; i < surgeries.length; i++) {
				saveMedicalRecordService(document.querySelector("#PetID").value, "Surgeries", surgeries[i], 2);
			}

			for (let i = 0; i < medications.length; i++) {
				saveMedicalRecordMedication(document.querySelector("#PetID").value, medications[i]);
			}

			deleteServices();
			deleteMedications()

			location.reload();
		}
		else{
			CustomAlertMessageShow("@LangResources["Patient_Message_FillRequiredField"]");
		}			
	}

	function deleteServices(){
		fetch('/Patients/DeleteMedicalRecordService', {
			method: 'post',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify(serviceToDelete)
		})
			.then(response => {
				if (!response.ok) {
					throw new Error('Network response was not ok');
				}
			})
			.catch(error => {
				console.error('There was a problem with the fetch operation:', error);
			});
	}

	function deleteMedications() {
		fetch('/Patients/DeleteMedicalRecordMedication', {
			method: 'post',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify(medicationToDelete)
		})
			.then(response => {
				if (!response.ok) {
					throw new Error('Network response was not ok');
				}
			})
			.catch(error => {
				console.error('There was a problem with the fetch operation:', error);
			});
	}

	function saveMedicalRecordService(petID, name ,element, type){

		var obj = {};

		if(name == "deleted"){
			obj = {
				PetID: petID,
				Type: type
			}
		}
		else{
			var serviceElement = element.querySelector(".Name" + name);
			var selected = serviceElement.options[serviceElement.selectedIndex];
			var description = selected.getAttribute('data-description');

			obj = {
				ID: element.querySelector(".ID" + name).value,
				PetID: petID,
				CategoryID: element.querySelector(".Type" + name).value,
				ServiceID: serviceElement.value,
				Type: type,
				DueDate: element.querySelector(".DueDate" + name).value,
				Description: description,
				Remarks: element.querySelector(".Remarks" + name).value,
				IsDeleted: 0,
				CreatedDate: element.querySelector(".CreatedDate" + name).value,
				CreatedBy: element.querySelector(".CreatedBy" + name).value,
				UpdatedDate: new Date(),
				UpdatedBy: "System"
			};
		}

		fetch('/Patients/UpdateMedicalRecordService', {
			method: 'post',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify(obj)
		})
			.then(response => {
				if (!response.ok) {
					throw new Error('Network response was not ok');
				}
			})
			.catch(error => {
				console.error('There was a problem with the fetch operation:', error);
			});
	}

	function saveMedicalRecordMedication(petID, element) {

		var obj = {};

		if(element == "deleted"){
			obj = {
				PetID: petID
			}
		}
		else{
			var productElement = element.querySelector(".NameMedication");
			var selected = productElement.options[productElement.selectedIndex];
			var description = selected.getAttribute('data-description');

			obj = {
				ID: element.querySelector(".IDMedication").value,
				PetID: petID,
				CategoryID: element.querySelector(".TypeMedication").value,
				ProductID: productElement.value,
				ExpiryDate: element.querySelector(".DueDateMedication").value,
				Status: 1,
				Description: description,
				CreatedDate: element.querySelector(".CreatedDateMedication").value,
				CreatedBy: element.querySelector(".CreatedByMedication").value,
				UpdatedDate: new Date(),
				UpdatedBy: "System"
			};
		}

		

		fetch('/Patients/UpdateMedicalRecordMedication', {
			method: 'post',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify(obj)
		})
			.then(response => {
				if (!response.ok) {
					throw new Error('Network response was not ok');
				}
			})
			.catch(error => {
				console.error('There was a problem with the fetch operation:', error);
			});
	}

	function downloadHealthCard() {
		var clone = document.getElementById("healthCardModal").cloneNode(true);
		clone.querySelector(".modal-header").classList.toggle("hideContainer");
		clone.querySelector(".modal-content").classList.toggle("modal-content-custom");
		var element = clone.querySelector(".modal-dialog");

		var opt = {
			margin: 1,
			filename: '@ViewData["PetName"] - Health Card.pdf',
			image: { type: 'jpeg', quality: 0.98 },
			html2canvas: { scale: 2 },
			jsPDF: { unit: 'in', format: 'letter', orientation: 'portrait' }
		};

		html2pdf().set(opt).from(element).save();
	}

	function printHealthCard() {
		var iframe = document.createElement("iframe"); // create the element
		document.body.appendChild(iframe);  // insert the element to the DOM

		var clone = document.getElementById("healthCardModal").cloneNode(true);
		clone.querySelector(".modal-header").classList.toggle("hideContainer");
		clone.querySelector(".modal-content").classList.toggle("modal-content-custom");

		var input = clone.innerHTML;

		iframe.contentWindow.document.write(input); // write the HTML to be printed
		iframe.contentWindow.print();  // print it
		document.body.removeChild(iframe); // remove the iframe from the DOM
	}

	function validationCheck(e) {
		var IsValidated = true;

		var validateElements = e.querySelectorAll(".isValidate");

		for (let i = 0; i < validateElements.length; i++) {
			if (validateElements[i].value == "") {
				IsValidated = false;
			}
		}

		return IsValidated;
	}

	function openScheduledModal()
	{
		$('#modalScheduled').modal('show');
	}
</script>